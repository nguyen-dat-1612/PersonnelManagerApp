package com.managerapp.personnelmanagerapp.di;

import com.managerapp.personnelmanagerapp.data.remote.api.*;
import com.managerapp.personnelmanagerapp.data.repository.*;
import com.managerapp.personnelmanagerapp.domain.repository.*;
import com.managerapp.personnelmanagerapp.utils.manager.LocalDataManager;
import com.managerapp.personnelmanagerapp.utils.manager.SecureTokenManager;
import com.managerapp.personnelmanagerapp.utils.manager.SessionManager;

import javax.inject.Singleton;

import dagger.Module;
import dagger.Provides;
import dagger.hilt.InstallIn;
import dagger.hilt.components.SingletonComponent;

// <editor-fold desc="üìå NOTE CHO TEAM - Gi·∫£i th√≠ch RepositoryModule">
/*
üóÇÔ∏è RepositoryModule ch·ªãu tr√°ch nhi·ªám cung c·∫•p c√°c instance Repository d√πng trong to√†n app.

üéØ M·ª•c ƒë√≠ch:
- G·∫Øn c√°c interface `Repository` v·ªõi c√°c `RepositoryImpl` c·ª• th·ªÉ.
- Gi√∫p ViewModel ho·∫∑c c√°c l·ªõp kh√°c c√≥ th·ªÉ inject Repository th√¥ng qua Hilt (Dagger).

üîó C·∫•u tr√∫c:
- M·ªói Repository c·∫ßn thi·∫øt th∆∞·ªùng s·ª≠ d·ª•ng 1 ho·∫∑c nhi·ªÅu ApiService (Retrofit) + LocalDataManager/SecureTokenManager/SessionManager.

üìå H∆∞·ªõng d·∫´n m·ªü r·ªông:
1. T·∫°o Repository interface trong `domain.repository`.
2. T·∫°o `RepositoryImpl` trong `data.repository`.
3. Vi·∫øt h√†m `@Provides` t∆∞∆°ng ·ª©ng ·ªü ƒë√¢y, s·ª≠ d·ª•ng c√°c API service ho·∫∑c manager c·∫ßn thi·∫øt.
4. ƒê·∫£m b·∫£o th√™m `@Singleton` n·∫øu b·∫°n mu·ªën gi·ªØ m·ªôt instance duy nh·∫•t to√†n app.

üí° L∆∞u √Ω:
- Module n√†y ƒë∆∞·ª£c `@InstallIn(SingletonComponent.class)`, nghƒ©a l√† c√°c dependencies ƒë∆∞·ª£c inject c√≥ v√≤ng ƒë·ªùi to√†n ·ª©ng d·ª•ng.
- Th·ª© t·ª± c√°c `@Provides` n√™n ƒëi theo nh√≥m logic ƒë·ªÉ d·ªÖ ƒë·ªçc: User, Leave, File, etc.
*/
// </editor-fold>

@Module
@InstallIn(SingletonComponent.class)
public class RepositoryModule {

    @Provides
    @Singleton
    public static AuthRepository provideAuthRepository(
            AuthApiService authApiService,
            SecureTokenManager secureTokenManager,
            SessionManager sessionManager
    ) {
        return new AuthRepositoryImpl(authApiService, secureTokenManager, sessionManager);
    }

    @Provides
    @Singleton
    public static UserRepository provideUserRepository(
            UserApiService userApiService,
            LocalDataManager localDataManager
    ) {
        return new UserRepositoryImpl(userApiService, localDataManager);
    }

    @Provides
    @Singleton
    public static NotificationRepository provideNotificationRepository(
            NotificationApiService notificationApiService,
            LocalDataManager localDataManager
    ) {
        return new NotificationRepositoryImpl(notificationApiService, localDataManager);
    }

    @Provides
    @Singleton
    public static LeaveTypeRepository provideLeaveTypeRepository(
            LeaveTypeApiService leaveTypeApiService
    ) {
        return new LeaveTypeRepositoryImpl(leaveTypeApiService);
    }

    @Provides
    @Singleton
    public static LeaveApplicationRepository provideLeaveApplicationRepository(
            LeaveApplicationApiService leaveApplicationApiService,
            LocalDataManager localDataManager
    ) {
        return new LeaveApplicationRepositoryImpl(leaveApplicationApiService, localDataManager);
    }

    @Provides
    @Singleton
    public static FeedBackRepository provideFeedBackRepository(
            FeedbackApiService feedbackApi
    ) {
        return new FeedBackRepositoryImpl(feedbackApi);
    }

    @Provides
    @Singleton
    public static DecisionRepository provideDecisionRepository(
            DecisionApiService decisionApiService,
            LocalDataManager localDataManager
    ) {
        return new DecisionRepositoryImpl(decisionApiService, localDataManager);
    }

    @Provides
    @Singleton
    public static ContractRepository provideContractRepository(
            ContractApiService contractApi
    ) {
        return new ContractRepositoryImpl(contractApi);
    }

    @Provides
    @Singleton
    public static FileRepository provideFileRepository(
            FileApiService fileApiService
    ) {
        return new FileRepositoryImpl(fileApiService);
    }

    @Provides
    @Singleton
    public static DepartmentRepository provideDepartmentRepository(
            DepartmentApiService departmentApiService,
            LocalDataManager localDataManager
    ) {
        return new DepartmentRepositoryImpl(departmentApiService, localDataManager);
    }

    @Provides
    @Singleton
    public static ReportRepository provideReportRepository(
            ReportApiService reportApiService
    ) {
        return new ReportRepositoryImpl(reportApiService);
    }
}
