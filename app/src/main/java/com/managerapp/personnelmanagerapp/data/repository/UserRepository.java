package com.managerapp.personnelmanagerapp.data.repository;

import android.util.Log;

import com.managerapp.personnelmanagerapp.data.remote.response.BaseResponse;
import com.managerapp.personnelmanagerapp.data.remote.response.UserProfileResponse;
import com.managerapp.personnelmanagerapp.data.remote.response.WorkLogResponse;
import com.managerapp.personnelmanagerapp.utils.LocalDataManager;
import com.managerapp.personnelmanagerapp.data.remote.api.UserApiService;
import com.managerapp.personnelmanagerapp.data.remote.request.ChangePasswordRequest;
import com.managerapp.personnelmanagerapp.domain.model.User;

import java.util.List;

import javax.inject.Inject;
import javax.inject.Singleton;

import io.reactivex.rxjava3.core.Single;

@Singleton
public class UserRepository {

    private final UserApiService apiService;
    private final String TAG = "UserRepository";
    private static final String SUCCESS_MESSAGE = "Change successful";
    private static final String TRUE_STRING = "true";
    private final LocalDataManager localDataManager;
    @Inject
    public UserRepository(UserApiService apiService, LocalDataManager localDataManager) {
        this.apiService = apiService;
        this.localDataManager = localDataManager;
    }

    public Single<UserProfileResponse> getUser() {
        return apiService.getUser()
                .flatMap( response -> {
                    if (response.isSuccessful() && response.body() != null) {
                        UserProfileResponse user = response.body().getData();
                        localDataManager.saveUserId(String.valueOf(user.getId()));
                        return Single.just(response.body().getData());
                    } else {
                        String errorMessage = "L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng th·∫•t b·∫°i: " + response.code();
                        if (response.errorBody() != null) {
                            try {
                                errorMessage = response.errorBody().string();
                            } catch (Exception e) {
                                Log.e(TAG, "Kh√¥ng th·ªÉ ƒë·ªçc l·ªói t·ª´ ph·∫£n h·ªìi", e);
                            }
                        }
                        Log.d(TAG, "L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i: " + errorMessage);
                        return Single.error(new Exception(errorMessage));
                    }
                }
        );
    }

    // ƒê·ªïi m·∫≠t kh·∫©u
    public Single<Boolean> changePasswordUser(String oldPass, String newPass) {
        Log.d(TAG, "B·∫Øt ƒë·∫ßu changePasswordUser() | oldPass: [****], newPass: [****]");

        // Log userId (·∫©n m·∫≠t kh·∫©u v√¨ l√Ω do b·∫£o m·∫≠t)
        long userId = Long.parseLong(localDataManager.getUserId());
        Log.d(TAG, "UserId: " + userId);

        // T·∫°o request
        ChangePasswordRequest changePasswordRequest = new ChangePasswordRequest(userId, oldPass, newPass);
        Log.d(TAG, "T·∫°o ChangePasswordRequest: " + changePasswordRequest.toString().replace(oldPass, "***").replace(newPass, "***"));

        return apiService.changePassword(changePasswordRequest)
                .doOnSubscribe(disposable ->
                        Log.d(TAG, "G·ªçi API changePassword...")
                )
                .map(response -> {
                    Log.d(TAG, "Nh·∫≠n ph·∫£n h·ªìi t·ª´ API | Code: " + response.code());

                    if (response.isSuccessful() && response.body() != null) {
                        String serverMessage = response.body().getMessage();
                        boolean isSuccess = SUCCESS_MESSAGE.equalsIgnoreCase(serverMessage);

                        Log.d(TAG, "Ph·∫£n h·ªìi t·ª´ server: " + serverMessage);
                        Log.d(TAG, "isSuccess: " + isSuccess);

                        if (isSuccess) {
                            Log.i(TAG, "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u TH√ÄNH C√îNG cho userId: " + userId);
                            return true;
                        } else {
                            Log.e(TAG, "‚ùå ƒê·ªïi m·∫≠t kh·∫©u TH·∫§T B·∫†I: " + serverMessage);
                            throw new Exception(serverMessage != null ? serverMessage : "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server");
                        }
                    }

                    // X·ª≠ l√Ω response l·ªói
                    String errorMessage = "L·ªói server (code: " + response.code() + ")";
                    if (response.errorBody() != null) {
                        try {
                            errorMessage = response.errorBody().string();
                            Log.e(TAG, "Chi ti·∫øt l·ªói t·ª´ errorBody: " + errorMessage);
                        } catch (Exception e) {
                            Log.e(TAG, "Kh√¥ng th·ªÉ ƒë·ªçc errorBody", e);
                        }
                    }
                    throw new Exception(errorMessage);
                })
                .doOnError(error ->
                        Log.e(TAG, "üî• L·ªói trong qu√° tr√¨nh changePasswordUser: " + error.getMessage(), error)
                )
                .doOnSuccess(success ->
                        Log.d(TAG, "K·∫øt th√∫c changePasswordUser | K·∫øt qu·∫£: " + success)
                );
    }

    public Single<List<WorkLogResponse>> getWorkLog(long userId) {
        return apiService.getWorkLog(userId)
                .flatMap( response -> {
                    Log.d(TAG, "M√£ ph·∫£n h·ªìi HTTP: " + response.body());
                    if (response.isSuccessful() && response.body() != null && response.body().getCode() == 200) {
                        Log.d(TAG, "L·∫•y d·ªØ li·ªáu th√†nh c√¥ng: " + response.body().getData().toString());
                        return Single.just(response.body().getData());
                    } else {
                        String errorMessage = "L·∫•y qu√° tr√¨nh c√¥ng t√°c th·∫•t b·∫°i: " + response.body().getMessage();
                        if (response.errorBody() != null) {
                            try {
                                errorMessage = response.errorBody().string();
                                Log.e(TAG, "Chi ti·∫øt l·ªói t·ª´ errorBody: " + errorMessage);
                            } catch (Exception e) {
                                Log.e(TAG, "Kh√¥ng th·ªÉ ƒë·ªçc l·ªói t·ª´ ph·∫£n h·ªìi", e);
                            }
                        }
                        Log.d(TAG, "L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i: " + errorMessage);
                        return Single.error(new Exception(errorMessage));
                    }
                })
                .doOnError(error -> Log.e(TAG, "L·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu: " + error.getMessage(), error));
    }
}
